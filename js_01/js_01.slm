1、'use strict'; 开启strict模式，变量必须使用关键字声明，默认不用关键字声明的变量为全局变量
    var
    let: 比var更严谨，
        1）不可以重复声明
        2）作用范围不一样
    const：定义常量

2、数组
    slice => substring
    unshift(): 往Array的头部添加若干元素
    shift():方法则把Array的第一个元素删掉
    sort():可以对当前Array进行排序
    reverse():把整个Array的元素给掉个个，也就是反转
    splice():方法是修改Array的“万能方法”，它可以从指定的索引开始删除若干元素，然后再从该位置添加若干元素：
    concat():方法把当前的Array和另一个Array连接起来，并返回一个新的Array
    join():方法是一个非常实用的方法，它把当前Array的每个元素都用指定的字符串连接起来，然后返回连接后的字符串：

3、对象
    delete xiaoming.age; // 删除age属性
    'name' in xiaoming; // true => 检测xiaoming是否拥有某一属性，可以用in操作符 【包括继承的属性】
    xiaoming.hasOwnProperty('name'); // true => 检测xiaoming是否拥有某一属性 【不包括继承的属性】

4、布尔类型
    JavaScript把null、undefined、0、NaN和空字符串''视为false，其他值一概视为true

5、Map
    初始化Map需要一个二维数组
    var m = new Map([['Michael', 95], ['Bob', 75], ['Tracy', 85]]);
    m.get('Michael'); // 95

    或者直接初始化一个空Map。Map具有以下方法：
    var m = new Map(); // 空Map
    m.set('Adam', 67); // 添加新的key-value
    m.set('Bob', 59);
    m.has('Adam'); // 是否存在key 'Adam': true
    m.get('Adam'); // 67
    m.delete('Adam'); // 删除key 'Adam'
    m.get('Adam'); // undefined

6、Set
    声明：
    var s1 = new Set(); // 空Set
    var s2 = new Set([1, 2, 3]); // 含1, 2, 3
    方法：
    add
    delete


7、循环
    1)for(i; i < 10; i++)
    2)for循环的一个变体是for ... in循环，它可以把一个对象的所有属性依次循环出来：
        for(var key in obj)
    3)while(i>0){}
    4)do{}while()
    5)ES6标准引入了新的iterable类型，Array、Map和Set都属于iterable类型
        var a = [1, 2, 3];
        for (var x of a) {
        }
    6)forEach
        @Array
            var a = ['A', 'B', 'C'];
            a.forEach(function (element, index, array) {
                // element: 指向当前元素的值
                // index: 指向当前索引
                // array: 指向Array对象本身
                alert(element);
            });
        @Set: Set没有索引，因此回调函数的前两个参数都是元素本身：
            var s = new Set(['A', 'B', 'C']);
            s.forEach(function (element, sameElement, set) {
                alert(element);
            });
        @Map: Map的回调函数参数依次为value、key和map本身：
            var m = new Map([[1, 'x'], [2, 'y'], [3, 'z']]);
            m.forEach(function (value, key, map) {
                alert(value);
            });

         注意：由于JavaScript的函数调用不要求参数必须一致，因此可以忽略它们

8、函数
    1）如果没有return语句，函数执行完毕后也会返回结果，只是结果为undefined
    2）由于JavaScript的函数也是一个对象，上述定义的abs()函数实际上是一个函数对象，而函数名abs可以视为指向该函数的变量
        var abs = function (x) {
            if (x >= 0) {
                return x;
            } else {
                return -x;
            }
        };
    3）类型检查
        typeof x !== 'number' // 判断x是否为数字类型

    4）arguments
        JavaScript还有一个免费赠送的关键字arguments，它只在函数内部起作用，并且永远指向当前函数的调用者传入的所有参数。arguments类似Array但它不是一个Array
        function foo(x) {
            alert(x); // 10
            for (var i=0; i<arguments.length; i++) {
                alert(arguments[i]); // 10, 20, 30
            }
        }
        foo(10, 20, 30);
    5）rest参数
        @由于JavaScript函数允许接收任意个参数，于是我们就不得不用arguments来获取所有参数：
        function foo(a, b) {
            var i, rest = [];
            if (arguments.length > 2) {
                for (i = 2; i<arguments.length; i++) {
                    rest.push(arguments[i]);
                }
            }
            console.log('a = ' + a);
            console.log('b = ' + b);
            console.log(rest);
        }
        @ES6标准引入了rest参数，上面的函数可以改写为：
        function foo(a, b, ...rest) {
            console.log('a = ' + a);
            console.log('b = ' + b);
            console.log(rest);
        }
        foo(1, 2, 3, 4, 5);
        // 结果:
        // a = 1
        // b = 2
        // Array [ 3, 4, 5 ]

        foo(1);
        // 结果:
        // a = 1
        // b = undefined
        // Array []

    注意：rest参数只能写在最后，前面用...标识

9、作用域
    1）JavaScript默认有一个全局对象window，全局作用域的变量实际上被绑定到window的一个属性：
    'use strict';
    var course = 'Learn JavaScript';
    alert(course); // 'Learn JavaScript'
    alert(window.course); // 'Learn JavaScript'

    2）名字空间
    全局变量会绑定到window上，不同的JavaScript文件如果使用了相同的全局变量，
    或者定义了相同名字的顶层函数，都会造成命名冲突，并且很难被发现。
    减少冲突的一个方法是把自己的所有变量和函数全部绑定到一个全局变量中。例如：
    / 唯一的全局变量MYAPP:
    var MYAPP = {};
    // 其他变量:
    MYAPP.name = 'myapp';
    MYAPP.version = 1.0;
    // 其他函数:
    MYAPP.foo = function () {
        return 'foo';
    };

    3）局部作用域
    由于JavaScript的变量作用域实际上是函数内部，我们在for循环等语句块中是无法定义具有局部作用域的变量的：
    'use strict';
    function foo() {
        for (var i=0; i<100; i++) {
            //
        }
        i += 100; // 仍然可以引用变量i
    }
    为了解决块级作用域，ES6引入了新的关键字let，用let替代var可以申明一个块级作用域的变量：
    'use strict';
    function foo() {
        var sum = 0;
        for (let i=0; i<100; i++) {
            sum += i;
        }
        i += 1; // SyntaxError
    }

10）this: 在一个方法内部，this是一个特殊变量，它始终指向当前对象
    1）以对象的方法形式调用，比如xiaoming.age()，该函数的this指向被调用的对象，也就是xiaoming
    如果单独调用函数，比如getAge()，此时，该函数的this指向全局对象，也就是window
    function getAge() {
        var y = new Date().getFullYear();
        return y - this.birth;
    }
    var xiaoming = {
        name: '小明',
        birth: 1990,
        age: getAge
    };
    xiaoming.age(); // 25, 正常结果
    getAge(); // NaN

    2）要保证this指向正确，必须用obj.xxx()的形式调用
    var fn = xiaoming.age; // 先拿到xiaoming的age函数
    fn(); // NaN

    3）在strict模式下让函数的this指向undefined
    'use strict';
    var xiaoming = {
        name: '小明',
        birth: 1990,
        age: function () {
            var y = new Date().getFullYear();
            return y - this.birth;
        }
    };
    var fn = xiaoming.age;
    fn(); // Uncaught TypeError: Cannot read property 'birth' of undefined

    4）方法重构
    'use strict';
    var xiaoming = {
        name: '小明',
        birth: 1990,
        age: function () {
            function getAgeFromBirth() {
                var y = new Date().getFullYear();
                return y - this.birth;
            }
            return getAgeFromBirth();
        }
    };
    xiaoming.age(); // Uncaught TypeError: Cannot read property 'birth' of undefined

    又报错了！原因是this指针只在age方法的函数内指向xiaoming，
    在函数内部定义的函数，this又指向undefined了！（在非strict模式下，它重新指向全局对象window！）

    修复的办法也不是没有，我们用一个that变量首先捕获this：
    'use strict';
    var xiaoming = {
        name: '小明',
        birth: 1990,
        age: function () {
            var that = this; // 在方法内部一开始就捕获this
            function getAgeFromBirth() {
                var y = new Date().getFullYear();
                return y - that.birth; // 用that而不是this
            }
            return getAgeFromBirth();
        }
    };
    xiaoming.age(); // 25

    5）apply ：显式指明this的指向
    接收两个参数，第一个参数就是需要绑定的this变量，第二个参数是Array，表示函数本身的参数。
    function getAge() {
        var y = new Date().getFullYear();
        return y - this.birth;
    }
    var xiaoming = {
        name: '小明',
        birth: 1990,
        age: getAge
    };
    xiaoming.age(); // 25
    getAge.apply(xiaoming, []); // 25, this指向xiaoming, 参数为空

    6）call
    另一个与apply()类似的方法是call()，唯一区别是：
    apply()把参数打包成Array再传入；
    call()把参数按顺序传入。
    比如调用Math.max(3, 5, 4)，分别用apply()和call()实现如下：
    Math.max.apply(null, [3, 5, 4]); // 5
    Math.max.call(null, 3, 5, 4); // 5
    注意：对普通函数调用，我们通常把this绑定为null。

    7）装饰器

    利用apply()，我们还可以动态改变函数的行为。
    JavaScript的所有对象都是动态的，即使内置的函数，我们也可以重新指向新的函数。
    现在假定我们想统计一下代码一共调用了多少次parseInt()，可以把所有的调用都找出来，
    然后手动加上count += 1，不过这样做太傻了。最佳方案是用我们自己的函数替换掉默认的parseInt()：

    var count = 0;
    var oldParseInt = parseInt; // 保存原函数
    window.parseInt = function () {
        count += 1;
        return oldParseInt.apply(null, arguments); // 调用原函数
    };

    // 测试:
    parseInt('10');
    parseInt('20');
    parseInt('30');
    count; // 3
